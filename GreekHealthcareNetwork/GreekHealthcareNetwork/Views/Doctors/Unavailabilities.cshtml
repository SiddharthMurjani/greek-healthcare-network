@model IEnumerable<GreekHealthcareNetwork.Models.DoctorsUnavailability>
@using Microsoft.AspNet.Identity;
@{
    ViewBag.Title = "Unavailabilities";
}

@section cssScripts{
    <link href="@Url.Content("~/Content/TestPlaton.css")" type="text/css" rel="stylesheet" />
    <style>
        .modal-lg {
            max-width: 600px;
        }
    </style>
}
<main id="main" class="mt-4">
    <div class="col-8 offset-2">
        <div class="page-header d-flex justify-content-between">
            <h1>
                @ViewBag.Title
            </h1>
            <p>
                <button id="declareUnavailability" class="btn btn-secondary">Declare unavailability period</button>
            </p>
        </div>

        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.UnavailableFrom)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.UnavailableUntil)
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody id="unavailabilitiesList">
                    @if (Model.Count() == 0)
                    {
                        <tr>
                            <td colspan="3">
                                You have not declared any unavailabilities yet.
                            </td>
                        </tr>
                    }
                    else
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.UnavailableFrom)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.UnavailableUntil)
                                </td>
                                <td>
                                    <button class="btn btn-warning table-button editButton" data-id="@item.Id">Edit</button>
                                    <button class="btn btn-danger table-button deleteButton" data-id="@item.Id">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>                
            </table>
        </div>
    </div>
</main>

<div class="modal fade" id="unavailabilityModal" tabindex="-1" role="dialog" aria-labelledby="unavailabilityModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <h4 class="modal-title" id="unavailabilityModalLabel">Unavailability Period</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container">
                    <form id="unavailabilityForm" class="form-horizontal">
                        @Html.AntiForgeryToken()
                        <div class="validation-summary-errors">
                            <ul class="text-danger">
                            </ul>
                        </div>
                        <input id="Id" value="" type="hidden">
                        <input id="DoctorId" value="@User.Identity.GetUserId()" type="hidden">
                        <div class="form-row mb-3">
                            <p class="col-md-3 control-label" style="padding-top: 25px;">Unavailable From:</p>
                            <div class="form-group">
                                <label for="UnavailableFromDate" class="col-md-12 control-label">Date</label>
                                <div class="col-md-12">
                                    <input id="UnavailableFromDate" name="UnavailableFromDate" class="form-control" type="date" data-val="true" data-val-required="Required field" data-val-min="Min value violation">
                                    <span class="field-validation-valid text-danger" data-valmsg-for="UnavailableFromDate" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="UnavailableFromTime" class="col-md-12 control-label">Time</label>
                                <div class="col-md-12">
                                    <input id="UnavailableFromTime" name="UnavailableFromTime" class="form-control" type="Time" data-val="true" data-val-required="Required field">
                                    <span class="field-validation-valid text-danger" data-valmsg-for="UnavailableFromTime" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                        </div>
                        <div class="form-row mb-3">
                            <p class="col-md-3 control-label" style="padding-top: 25px;">Unavailable Until:</p>
                            <div class="form-group">
                                <label for="UnavailableUntilDate" class="col-md-12 control-label">Date</label>
                                <div class="col-md-12">
                                    <input id="UnavailableUntilDate" name="UnavailableUntilDate" class="form-control" type="date" data-val="true" data-val-required="Required field">
                                    <span class="field-validation-valid text-danger" data-valmsg-for="UnavailableUntilDate" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="UnavailableUntilTime" class="col-md-12 control-label">Time</label>
                                <div class="col-md-12">
                                    <input id="UnavailableUntilTime" name="UnavailableUntilTime" class="form-control" type="Time" data-val="true" data-val-required="Required field" data-val-min="Min value violation">
                                    <span class="field-validation-valid text-danger" data-valmsg-for="UnavailableUntilTime" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-success" id="submit">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        jQuery.extend(jQuery.validator.messages, {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            accept: "Please enter a value with a valid extension.",
            maxlength: jQuery.validator.format("Please enter no more than {0} characters."),
            minlength: jQuery.validator.format("Please enter at least {0} characters."),
            rangelength: jQuery.validator.format("Please enter a value between {0} and {1} characters long."),
            range: jQuery.validator.format("Please enter a value between {0} and {1}."),
            max: jQuery.validator.format("Max value violation"),
            min: jQuery.validator.format("Min value violation")
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#unavailabilityModal').on('hidden.bs.modal', function () {
                $('#Id').val('');
                $('#unavailabilityForm').trigger('reset');
            })
            $('#declareUnavailability').click(() => $('#unavailabilityModal').modal('show'));
            const today = new Date();
            const day = String(today.getDate()).padStart(2, '0');
            const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            const year = today.getFullYear();
            const date = year + '-' + month + '-' + day
            $('#UnavailableFromDate').attr('min', date);
            $('#UnavailableUntilDate').attr('min', date);
            $('#UnavailableFromDate').change(function () {
                const value = $(this).val();
                if ($('#UnavailableUntilDate').val() == value) {
                    if ($('#UnavailableUntilTime').val() < $('#UnavailableFromTime').val()) {
                        $('#UnavailableUntilTime').val($('#UnavailableFromTime').val());
                    }
                } else if ($('#UnavailableUntilDate').val() < value) {
                    $('#UnavailableUntilDate').val(value);
                }
                $('#UnavailableUntilDate').attr('min', value);
            });
            $('#UnavailableUntilDate').change(function () {
                const value = $(this).val();
                if ($('#UnavailableFromDate').val() == value) {
                    if ($('#UnavailableUntilTime').val() < $('#UnavailableFromTime').val()) {
                        $('#UnavailableUntilTime').val($('#UnavailableFromTime').val());
                    }
                }
            });
            $('#UnavailableFromTime').change(function () {
                const value = $(this).val();
                if ($('#UnavailableFromDate').val() == $('#UnavailableUntilDate').val()) {
                    if ($('#UnavailableUntilTime').val() < value) {                        
                        $('#UnavailableUntilTime').val(value);
                    }
                    $('#UnavailableUntilTime').attr('min', value);
                }
                else {
                    $('#UnavailableUntilTime').removeAttr('min');
                }
            });
            $('.editButton').click(editUnavailabilityEntry);
            $('.deleteButton').click(deleteUnavailabilityEntry);
            $('#submit').click(function (e) {
                e.preventDefault();
                const $form = $('#unavailabilityForm');
                $.validator.unobtrusive.parse($form);
                $form.validate();
                if ($form.valid()) {
                    const id = $('#Id').val();
                    if (id == '') {
                        let model = new Object();
                        model.DoctorId = $('#DoctorId').val();
                        model.UnavailableFromDate = $('#UnavailableFromDate').val();
                        model.UnavailableFromTime = $('#UnavailableFromTime').val();
                        model.UnavailableUntilDate = $('#UnavailableUntilDate').val();
                        model.UnavailableUntilTime = $('#UnavailableUntilTime').val();
                        model = JSON.stringify(model);
                        $.ajax({
                            contentType: 'application/json',
                            type: 'post',
                            url: '/api/DoctorUnavailabilities',
                            data: model,
                            cache: false,
                            processData: false,
                            success: function (data) {
                                if (@Model.Count() == 0) {
                                    $('#unavailabilitiesList').children().remove();
                                }
                                const tr = $(document.createElement('tr'));
                                const td1 = $(document.createElement('td'));
                                $(td1).text(data.UnavailableFrom);
                                $(tr).append(td1);
                                const td2 = $(document.createElement('td'));
                                $(td2).text(data.UnavailableUntil);
                                $(tr).append(td2);
                                const td3 = $(document.createElement('td'));
                                const editButton = $(document.createElement('button'));
                                $(editButton).addClass('btn btn-warning table-button editButton');
                                $(editButton).text('Edit');
                                $(editButton).attr('data-id', data.Id);
                                $(editButton).click(editUnavailabilityEntry);
                                $(td3).append(editButton);
                                const deleteButton = $(document.createElement('button'));
                                $(deleteButton).addClass('btn btn-danger table-button deleteButton');
                                $(deleteButton).text('Delete');
                                $(deleteButton).attr('data-id', data.Id);
                                $(deleteButton).click(deleteUnavailabilityEntry);
                                $(td3).append(deleteButton);
                                $(tr).append(td3);
                                if (@Model.Count() == 0) {
                                    $('#unavailabilitiesList').append(tr);
                                }
                                else {
                                    let count = 1;
                                    const childrenNum = $('#unavailabilitiesList').children().length;
                                    let line = $('#unavailabilitiesList').children().first();
                                    while (compareDateTimes($(line).children().first().text().trim(),$(td1).text()) && count < childrenNum) {
                                        line = $(line).next();
                                        count = count + 1;
                                    }
                                    if (compareDateTimes($(line).children().first().text().trim(),$(td1).text())) {
                                        $(line).after(tr);
                                    }
                                    else {
                                        $(line).before(tr);
                                    }
                                }
                                $('#unavailabilityModal').modal('hide');
                            },
                            error: function (error) {
                                const errorObject = error.responseJSON.ModelState;
                                $('#unavailabilityForm div.validation-summary-errors > ul').children().remove();
                                for (var property in errorObject) {
                                    if (errorObject.hasOwnProperty(property)) {
                                        console.log(property);
                                        if (property == '') {
                                            $('#unavailabilityForm div.validation-summary-errors > ul').append('<li>' + errorObject[property] + '</li>')
                                        }
                                        else {
                                            for (let i = 0; i < errorObject[property].length; i++) {
                                                $('#unavailabilityForm div.validation-summary-errors > ul').append('<li>' + errorObject[property][i] + '</li>')
                                            }
                                        }
                                    }
                                }
                                const $form = $('#unavailabilityForm');
                                $.validator.unobtrusive.parse($form);
                                $form.validate();
                                if (!$form.valid()) {
                                    $.each($form.validate().errorList, function (key, value) {
                                        const $errorSpan = $("span[data-valmsg-for='" + value.element.id + "']");
                                        $errorSpan.html("<span style='color:red'>" + value.message + "</span>");
                                        $errorSpan.show();
                                    });
                                }
                            }
                        });
                    }
                    else {
                        let model = new Object();
                        model.Id = id;
                        model.DoctorId = $('#DoctorId').val();
                        model.UnavailableFromDate = $('#UnavailableFromDate').val();
                        model.UnavailableFromTime = $('#UnavailableFromTime').val();
                        model.UnavailableUntilDate = $('#UnavailableUntilDate').val();
                        model.UnavailableUntilTime = $('#UnavailableUntilTime').val();
                        model = JSON.stringify(model);
                        $.ajax({
                            contentType: 'application/json',
                            type: 'put',
                            url: '/api/DoctorUnavailabilities',
                            data: model,
                            cache: false,
                            processData: false,
                            success: function (data) {
                                const grandparent = $('button[data-id=' + data.Id + ']').parent().parent();
                                $(grandparent).children('td:nth-child(1)').text(data.UnavailableFrom);
                                $(grandparent).children('td:nth-child(2)').text(data.UnavailableUntil);
                                const elem = grandparent;
                                $(grandparent).remove();
                                let count = 1;
                                const childrenNum = $('#unavailabilitiesList').children().length;
                                let line = $('#unavailabilitiesList').children().first();
                                while (compareDateTimes($(line).children().first().text().trim(),data.UnavailableFrom) && count < childrenNum) {
                                    line = $(line).next();
                                    count = count + 1;
                                }
                                if (compareDateTimes($(line).children().first().text().trim(), data.UnavailableFrom)) {                                    
                                    $(elem).children('td:nth-child(3)').children('button:nth-child(1)').click(editUnavailabilityEntry);
                                    $(elem).children('td:nth-child(3)').children('button:nth-child(2)').click(deleteUnavailabilityEntry);
                                    $(line).after(elem);
                                }
                                else {                                    
                                    $(elem).children('td:nth-child(3)').children('button:nth-child(1)').click(editUnavailabilityEntry);
                                    $(elem).children('td:nth-child(3)').children('button:nth-child(2)').click(deleteUnavailabilityEntry);
                                    $(line).before(elem);
                                }
                                $('#unavailabilityModal').modal('hide');
                            },
                            error: function (error) {
                                const errorObject = error.responseJSON.ModelState;
                                $('#unavailabilityForm div.validation-summary-errors > ul').children().remove();
                                for (var property in errorObject) {
                                    if (errorObject.hasOwnProperty(property)) {
                                        console.log(property);
                                        if (property == '') {
                                            $('#unavailabilityForm div.validation-summary-errors > ul').append('<li>' + errorObject[property] + '</li>')
                                        }
                                        else {
                                            for (let i = 0; i < errorObject[property].length; i++) {
                                                $('#unavailabilityForm div.validation-summary-errors > ul').append('<li>' + errorObject[property][i] + '</li>')
                                            }
                                        }
                                    }
                                }
                                const $form = $('#unavailabilityForm');
                                $.validator.unobtrusive.parse($form);
                                $form.validate();
                                if (!$form.valid()) {
                                    $.each($form.validate().errorList, function (key, value) {
                                        const $errorSpan = $("span[data-valmsg-for='" + value.element.id + "']");
                                        $errorSpan.html("<span style='color:red'>" + value.message + "</span>");
                                        $errorSpan.show();
                                    });
                                }
                            }
                        });
                    }
                }
                else {
                    console.log($form.validate().errorList);
                    $.each($form.validate().errorList, function (key, value) {
                        console.log(value);
                        const $errorSpan = $("span[data-valmsg-for='" + value.element.id + "']");
                        $errorSpan.html("<span style='color:red'>" + value.message + "</span>");
                        $errorSpan.show();
                    });
                }
            });
            function editUnavailabilityEntry(e) {
                const id = $(e.target).data('id');
                $.ajax({
                    type: 'get',
                    dataType: 'json',
                    url: '/api/DoctorUnavailabilities/' + id,
                    success: function (data) {
                        $('#Id').val(data.Id);
                        $('#DoctorId').val(data.DoctorId);
                        let dateSplitted = data.UnavailableFromDate.split('T');
                        $('#UnavailableFromDate').val(dateSplitted[0]);
                        $('#UnavailableFromTime').val(data.UnavailableFromTime);
                        dateSplitted = data.UnavailableUntilDate.split('T');
                        $('#UnavailableUntilDate').val(dateSplitted[0]);
                        $('#UnavailableUntilTime').val(data.UnavailableUntilTime);
                        $('#unavailabilityModal').modal('show');
                    },
                    error: function (error) {
                        console.log(error);
                    }
                })
            }
            function deleteUnavailabilityEntry(e) {
                const id = $(e.target).data('id');
                $.ajax({
                    type: 'delete',
                    url: '/api/DoctorUnavailabilities/' + id,
                    success: function () {
                        $('button[data-id=' + id + ']').parent().parent().remove();
                        if ($('#unavailabilitiesList').children().length == 0) {
                            $('#unavailabilitiesList').append('<tr>' +
                                                                '<td colspan="3">' +
                                                                    'You have not declared any unavailabilities yet.' +
                                                                '</td>' +
                                                            '</tr>');
                        }
                    },
                    error: function (error) {
                        console.log(error);
                    }
                })
            }
            function compareDateTimes(datetime1, datetime2) {
                const date1 = datetime1.split(' ')[0];
                const time1 = datetime1.split(' ')[1];
                const date2 = datetime2.split(' ')[0];
                const time2 = datetime2.split(' ')[1];
                const year1 = date1.split('-')[2];
                const month1 = date1.split('-')[1];
                const day1 = date1.split('-')[0];
                const year2 = date2.split('-')[2];
                const month2 = date2.split('-')[1];
                const day2 = date2.split('-')[0];
                if (year1 > year2) {
                    return true;
                } else if (year1 < year2) {
                    return false;
                } else {
                    if (month1 > month2) {
                        return true;
                    } else if (month1 < month2) {
                        return false;
                    } else {
                        if (day1 > day2) {
                            return true;
                        } else if (day1 < day2) {
                            return false;
                        } else {
                            if (time1 > time2) {
                                return true;
                            } else {
                                return false;
                            }
                        }
                    }
                }
            }
        })
    </script>
}